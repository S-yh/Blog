(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{369:function(e,v,_){"use strict";_.r(v);var l=_(43),t=Object(l.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"洋葱模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#洋葱模型"}},[e._v("#")]),e._v(" 洋葱模型")]),e._v(" "),_("p",[e._v("在Koa中, 请求和响应都放在中间件的第一个参数context对象中   request--\x3e···中间件··· --\x3eresponse  洋葱就是一层一层的中间件")]),e._v(" "),_("h2",{attrs:{id:"node-js优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node-js优缺点"}},[e._v("#")]),e._v(" node.js优缺点")]),e._v(" "),_("ul",[_("li",[e._v("优点:\n"),_("ul",[_("li",[e._v("事件驱动, 通过闭包很容易实现客户端的声明周期")]),e._v(" "),_("li",[e._v("不用担心多线程, 锁, 并行计算的问题,")]),e._v(" "),_("li",[e._v("V8引擎速度快,")])])]),e._v(" "),_("li",[e._v("缺点:\n"),_("ul",[_("li",[e._v("nodejs更新快, 可能出现版本不兼容")]),e._v(" "),_("li",[e._v("不成熟, 没有大制作")]),e._v(" "),_("li",[e._v("不支持进程和线程的操作")])])])]),e._v(" "),_("h2",{attrs:{id:"错误优先的回调函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#错误优先的回调函数"}},[e._v("#")]),e._v(" 错误优先的回调函数")]),e._v(" "),_("ul",[_("li",[e._v("错误优先的回调函数用于同时返回错误和数据, 第一个参数返回错误, 并且验证他是否出错, 其他参数返回数据")])]),e._v(" "),_("h2",{attrs:{id:"如何避免回调地域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何避免回调地域"}},[e._v("#")]),e._v(" 如何避免回调地域")]),e._v(" "),_("ul",[_("li",[e._v("模块化, 将回调函数转换为独立的函数,")]),e._v(" "),_("li",[e._v("使用promise")]),e._v(" "),_("li",[e._v("使用async/await")])]),e._v(" "),_("h2",{attrs:{id:"node事件循环"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node事件循环"}},[e._v("#")]),e._v(" "),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/yNyBWZqTiLSqvscNXDaaPw",target:"_blank",rel:"noopener noreferrer"}},[e._v("node事件循环"),_("OutboundLink")],1)]),e._v(" "),_("ul",[_("li",[_("p",[e._v("node采用的是单线程的处理机制. (所有的I/O请求都采用非阻塞的工作方式) 至少从Node开发者的角度是这样的, 而在底层, node借助libuv来作为抽象封装层. 从而屏蔽不同操作系统的差异, node可以借助livuv来实现线程.")])]),e._v(" "),_("li",[_("p",[e._v("libuv库负责node api的执行, 他将不同的任务分配给不同的线程, 形成一个事件循环. 以异步的方式将任务的执行结果返回给V8引擎")])]),e._v(" "),_("li",[_("p",[e._v("每个I/O都需要一个回调函数.  一旦执行完便推到事件循环上用于执行")])]),e._v(" "),_("li",[_("p",[e._v("与浏览器不同的是 node有多个宏任务队列, 浏览器只有一个")])]),e._v(" "),_("li",[_("p",[e._v("浏览器端的 Event Loop 和 Node.js 中的 Event Loop 是不同的，实现机制也不一样")])]),e._v(" "),_("li",[_("p",[e._v("Node.js 可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段")])]),e._v(" "),_("li",[_("p",[e._v("Node.js 中限制性全局 script 代码，执行完同步代码后，先从微任务队列 Next Tick Queue 中取出所有任务放入调用栈执行，再从其他微任务队列中取出所有任务放入调用栈中执行，然后开始宏任务的6个阶段，每个阶段都将其宏任务队列中的所有任务都取出来执行(浏览器是只取第一个执行)，每个宏任务阶段执行完毕之后开始执行微任务，再开始执行下一阶段宏任务，以此构成事件循环")])])]),e._v(" "),_("h2",{attrs:{id:"node事件循环-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#node事件循环-2"}},[e._v("#")]),e._v(" node事件循环")]),e._v(" "),_("ul",[_("li",[e._v("node中也有宏任务和微任务, Node与浏览器事件循环不同, 其中有多个宏任务队列, 而浏览器只有一个宏任务队列,")]),e._v(" "),_("li",[e._v("node的架构底层是libuv, 它是Node自身的动力来源之一, 通过它可以去调用一些底层操作, Node中的Event Loop功能就是在libuv中封装实现的")]),e._v(" "),_("li",[e._v("node的事件循环分成了六个阶段, 每个阶段对应一个宏任务队列相当于是宏任务进行了一个分类\n"),_("ul",[_("li",[e._v("timers(计时器): 执行setTimeout以及setInterval的回调")]),e._v(" "),_("li",[e._v("I/O callbacks: 处理网络, 流, tcp的错误回调")]),e._v(" "),_("li",[e._v("idel, prepare-- 闲置阶段: node内部使用")]),e._v(" "),_("li",[e._v("poll(轮询): 执行poll中的I/O队列, 检查定时器是否到时间")]),e._v(" "),_("li",[e._v("check(检查): 存放setImmediate回调")]),e._v(" "),_("li",[e._v("close callbacks 关闭回调,")])])]),e._v(" "),_("li",[e._v("轮询顺序: 执行的轮询顺序, 每个阶段都要等对应的宏任务队列执行完毕才会进入到下一个阶段的宏任务队列, 每两个阶段中间执行微任务队列\n"),_("ul",[_("li",[e._v("timers")]),e._v(" "),_("li",[e._v("I/O callbacks")]),e._v(" "),_("li",[e._v("poll")]),e._v(" "),_("li",[e._v("setImmediate")]),e._v(" "),_("li",[e._v("close events")])])]),e._v(" "),_("li",[e._v("event loop过程\n"),_("ul",[_("li",[e._v("执行全局的script同步代码")]),e._v(" "),_("li",[e._v("执行微任务队列, 先执行所有Next Tick队列中的所有任务, 在执行其他的微任务队列中的所有任务")]),e._v(" "),_("li",[e._v("开始执行宏任务, 共六个阶段, 从第一个阶段开始执行自己宏任务队列中的所有任务(浏览器是从宏任务队列中取第一个执行)")]),e._v(" "),_("li",[e._v("每个阶段的宏任务执行完毕, 开始执行微任务")]),e._v(" "),_("li",[e._v("TimersQueue -> 步骤2 -> I/O Queue -> 步骤2 -> Check Queue -> 步骤2 -> Close Callback Queue -> 步骤2 -> TimersQueue ...")]),e._v(" "),_("li",[e._v("nextTick事件是一个单独的队列. 他的优先级高于微任务, 所以在当前宏任务/同步任务执行完成之后, 会先执行nextTick队列中的所有任务, 再去执行微任务队列中的所有任务")])])]),e._v(" "),_("li",[e._v("node端和浏览器端有什么不同\n"),_("ul",[_("li",[e._v("浏览器端的 Event Loop 和 Node.js 中的 Event Loop 是不同的，实现机制也不一样")]),e._v(" "),_("li",[e._v("Node.js 可以理解成有4个宏任务队列和2个微任务队列，但是执行宏任务时有6个阶段")]),e._v(" "),_("li",[e._v("Node.js 中限制性全局 script 代码，执行完同步代码后，先从微任务队列 Next Tick Queue 中取出所有任务放入调用栈执行，再从其他微任务队列中取出所有任务放入调用栈中执行，然后开始宏任务的6个阶段，每个阶段都将其宏任务队列中的所有任务都取出来执行(浏览器是只取第一个执行)，每个宏任务阶段执行完毕之后开始执行微任务，再开始执行下一阶段宏任务，以此构成事件循环")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);